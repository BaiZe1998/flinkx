// Code generated by Kitex v0.3.4. DO NOT EDIT.

package sinkservice

import (
	"context"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"word-count/cmd/sink/kitex_gen/sinkdemo"
)

func serviceInfo() *kitex.ServiceInfo {
	return sinkServiceServiceInfo
}

var sinkServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "SinkService"
	handlerType := (*sinkdemo.SinkService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateSink": kitex.NewMethodInfo(createSinkHandler, newSinkServiceCreateSinkArgs, newSinkServiceCreateSinkResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "sinkdemo",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.3.4",
		Extra:           extra,
	}
	return svcInfo
}

func createSinkHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*sinkdemo.SinkServiceCreateSinkArgs)
	realResult := result.(*sinkdemo.SinkServiceCreateSinkResult)
	success, err := handler.(sinkdemo.SinkService).CreateSink(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSinkServiceCreateSinkArgs() interface{} {
	return sinkdemo.NewSinkServiceCreateSinkArgs()
}

func newSinkServiceCreateSinkResult() interface{} {
	return sinkdemo.NewSinkServiceCreateSinkResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateSink(ctx context.Context, req *sinkdemo.CreateSinkRequest) (r *sinkdemo.CreateSinkResponse, err error) {
	var _args sinkdemo.SinkServiceCreateSinkArgs
	_args.Req = req
	var _result sinkdemo.SinkServiceCreateSinkResult
	if err = p.c.Call(ctx, "CreateSink", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
